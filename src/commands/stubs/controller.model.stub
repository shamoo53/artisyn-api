import { Request, Response } from "express";

import { PrismaClient } from "@prisma/client";
import Resource from '../resources/index';
import { flattenObject } from "../utils/helpers";
import formidable from 'formidable';

const prisma = new PrismaClient();

/**
 * {{ControllerName}}
 */
export default class {
    async index (req: Request, res: Response) {

        Resource(req, res, {
            data: await prisma.{{ModelName}}.findMany(
                { orderBy: { id: 'asc' } }
            ),
        })
            .json()
            .status(200)
            .additional({
                status: 'success',
                message: 'OK',
                code: 200,
            });
    }

    async show (req: Request, res: Response) {

        Resource(req, res, {
            data: await prisma.{{ModelName}}.findFirst(
                { where: { id: req.params.id } }
            ),
        })
            .json()
            .status(200)
            .additional({
                status: 'success',
                message: 'OK',
                code: 200,
            });
    }

    async create (req: Request, res: Response) {
        const form = formidable();

        form.parse(req, async (err, fields, files) => {
            const data = await prisma.{{ModelName}}.create({
                data: flattenObject(fields),
            })

            Resource(req, res, {
                data,
            })
                .json()
                .status(201)
                .additional({
                    status: 'success',
                    message: 'New {{ModelName}} created successfully',
                    code: 201,
                });
        });
    }

    async update (req: Request, res: Response) {
        const data = await prisma.{{ModelName}}.update({
            where: { id: req.params.id },
            data: req.body(),
        })

        Resource(req, res, {
            data,
        })
            .json()
            .status(202)
            .additional({
                status: 'success',
                message: '{{ModelName}} updated successfully',
                code: 202,
            });
    }

    async delete (req: Request, res: Response) {
        await prisma.{{ModelName}}.delete(
            { where: { id: req.params.id } }
        )

        Resource(req, res, {
            data: {},
        })
            .json()
            .status(202)
            .additional({
                status: 'success',
                message: '{{ModelName}} deleted successfully',
                code: 202,
            });
    }
}
